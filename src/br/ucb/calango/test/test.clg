algoritmo notas;
// Síntese
//  Objetivo:  Controlar as notas dos alunos de uma disciplina
//  Entrada : Matricula Nota Idade
//  Saída   : Matricula Nota Idade ( Em ordem decrescente )


principal
	// Declarações
	inteiro matriculas[100],idades[100],cont;
	real notas[100];
	logico encontraRepeticao;
	caracter opcaoContinuar;
	// Instruções
	cont = -1;
	faca
		cont = cont+1;
		faca
			matriculas[cont]=validaMatricula(1,9999,"Digite sua matricula:","Invalido.A matricula deve estar entre 1 e 9999!");
			encontraRepeticao = verificaRepeticaoInteiro(matriculas,cont);
			se(encontraRepeticao == verdadeiro)entao
				escreval ("Esta matricula ja existe!");
			fimSe
		enquanto(encontraRepeticao == verdadeiro);
		notas[cont]=leValidaNota();
		idades[cont]=leValidaIdade();
		opcaoContinuar = leValidaContinua();
	enquanto(cont <=99 e opcaoContinuar == 'S');
	
	apresentaDados (cont,matriculas,notas,idades);
	
fimPrincipal

//---------------------------------//
//Objetivo:
//Parametro:
//Retorno:

funcao logico verificaRepeticaoInteiro (inteiro matriculas [],inteiro posicao)  //posicao = cont
	inteiro contador;
	logico repeticao;
	repeticao = falso;
	para(contador de 0 ate posicao-1 passo 1)faca
		se(matriculas[posicao] == matriculas[contador])entao
			repeticao = verdadeiro;
			interrompa;
		fimSe
	fimPara
	retorna(repeticao);
fimFuncao

//---------------------------------//
//Objetivo:
//Parametro:
//Retorno:

funcao inteiro validaMatricula (inteiro nroMin, inteiro nroMax, texto titulo, texto msgErro)
	inteiro matricula;
	faca
		escreva (titulo);
		leia(matricula);
		se(matricula < nroMin ou matricula > nroMax)entao
			escreval (msgErro);
		fimSe
	enquanto(matricula < nroMin ou matricula > nroMax);
	retorna (matricula);
fimFuncao

//---------------------------------//
//Objetivo:
//Parametro:
//Retorno:

funcao caracter leValidaContinua ()

	caracter continua;
	faca
		escreval("");
		escreva ("Deseja informar outro aluno? (S - Sim / N - Nao)");
		leiaCaracter(continua);
		continua = maiusculoCaracter(continua);
		limpaTela();
		se(continua != 'S' e continua != 'N')entao
			escreva ("Tecla invalida!");
		fimSe
	enquanto(continua != 'S' e continua != 'N');
	retorna (continua);

fimFuncao

//---------------------------------//
//Objetivo:
//Parametro:
//Retorno:

funcao real leValidaNota ()
	real nota;
	faca
		escreva ("Digite a sua nota:");
		leia (nota);
		se(nota <0 ou nota >10)entao
			escreval ("Nota invalida!");
		fimSe
	enquanto (nota <0 ou nota >10);
	retorna (nota);
fimFuncao

//---------------------------------//
//Objetivo:
//Parametro:
//Retorno:

funcao inteiro leValidaIdade ()
	inteiro idade;
	faca
		escreva ("Digite a sua idade:");
		leia (idade);
		se(idade <10 ou idade >100)entao
			escreval ("Idade invalida!");
		fimSe
	enquanto (idade <10 ou idade >100);
	retorna (idade);
fimFuncao

//---------------------------------//
//Objetivo:
//Parametro:
//Retorno:

procedimento apresentaDados (inteiro cont,inteiro matriculas[],inteiro notas[],real idades[])
	inteiro repeticao;
	escreval ("MATRICULA NOTA IDADE");
	para(repeticao de 0 ate cont-1 passo 1)faca
		escreval (matriculas[repeticao]," ",notas[repeticao]," ",idades[repeticao]);
	fimPara

fimProcedimento