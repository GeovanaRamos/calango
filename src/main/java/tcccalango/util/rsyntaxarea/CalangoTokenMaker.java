// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: ./CalangoTokenMaker.flex

/*
CHANGES:

FIRST:
you have to do the following things manually: There are two zzRefill() and yyreset() methods
with the same signatures in the generated file. You need to delete the second of each definition
(the ones generated by the lexer). Change the declaration/definition of zzBuffer to NOT be initialized.
This is a needless memory allocation for us since we will be pointing the array somewhere else anyway.

SECOND:
from:
        zzEndRead = zzStartRead + s.count - 1;
        zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
to:
        zzEndRead = zzStartRead + s.count;
        zzCurrentPos = zzMarkedPos = s.offset;

*/
package tcccalango.util.rsyntaxarea;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * 
 */

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class CalangoTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int MLC = 2;
  public static final int EOL_COMMENT = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\6\1\13\2\14"+
    "\1\15\1\16\1\6\1\16\1\17\1\20\1\21\3\22"+
    "\4\23\2\24\1\25\1\6\1\26\1\6\1\26\1\6"+
    "\1\10\1\27\1\30\1\31\1\32\1\33\1\34\5\11"+
    "\1\35\3\11\1\36\1\37\1\11\1\40\1\41\3\11"+
    "\1\42\2\11\1\14\1\43\1\14\1\26\1\44\1\0"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\2\11\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\11"+
    "\1\73\1\74\1\26\1\74\1\6\6\0\1\3\u01a2\0"+
    "\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\1\1\5\2\10\15\1\1\11\1\12\5\11"+
    "\1\13\3\11\1\4\1\14\1\4\1\0\1\6\1\0"+
    "\1\15\1\6\1\16\1\17\1\20\1\21\1\22\1\21"+
    "\1\16\1\21\1\10\1\21\5\1\1\23\15\1\1\24"+
    "\3\1\1\23\2\1\1\25\10\0\1\26\2\4\1\0"+
    "\1\6\1\27\1\15\3\6\1\22\1\0\1\16\1\22"+
    "\32\1\10\0\1\4\1\0\1\6\15\1\1\24\6\1"+
    "\1\30\3\1\2\0\1\31\2\0\1\32\1\4\1\0"+
    "\1\6\25\1\4\0\1\4\1\0\1\6\23\1\1\24"+
    "\7\1\1\30\22\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[250];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\267\0\u0131\0\u016e"+
    "\0\267\0\u01ab\0\267\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc"+
    "\0\u0319\0\u0356\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4"+
    "\0\u0501\0\u053e\0\u057b\0\u05b8\0\u05f5\0\267\0\u0632\0\u066f"+
    "\0\u06ac\0\u06e9\0\u0726\0\267\0\u0763\0\u07a0\0\u07dd\0\u081a"+
    "\0\267\0\u0857\0\u0894\0\u08d1\0\u090e\0\267\0\u094b\0\u0988"+
    "\0\267\0\267\0\u09c5\0\u0a02\0\u0a3f\0\u09c5\0\u0a7c\0\u09c5"+
    "\0\u0ab9\0\u0af6\0\u0b33\0\u0b70\0\u0bad\0\u0bea\0\u016e\0\u0c27"+
    "\0\u0c64\0\u0ca1\0\u0cde\0\u0d1b\0\u0d58\0\u0d95\0\u0dd2\0\u0e0f"+
    "\0\u0e4c\0\u0e89\0\u0ec6\0\u0f03\0\u016e\0\u0f40\0\u0f7d\0\u0fba"+
    "\0\u0ff7\0\u1034\0\u1071\0\267\0\u10ae\0\u10eb\0\u1128\0\u1165"+
    "\0\u11a2\0\u11df\0\u121c\0\u1259\0\267\0\u1296\0\u12d3\0\u1310"+
    "\0\u134d\0\267\0\u090e\0\u138a\0\u13c7\0\u1404\0\u09c5\0\u1441"+
    "\0\u147e\0\u14bb\0\u14f8\0\u1535\0\u1572\0\u15af\0\u15ec\0\u1629"+
    "\0\u1666\0\u16a3\0\u16e0\0\u171d\0\u175a\0\u1797\0\u17d4\0\u1811"+
    "\0\u184e\0\u188b\0\u18c8\0\u1905\0\u1942\0\u197f\0\u19bc\0\u19f9"+
    "\0\u1a36\0\u1a73\0\u1ab0\0\u1aed\0\u1b2a\0\u1b67\0\u1ba4\0\u1be1"+
    "\0\u1c1e\0\u1c5b\0\u1c98\0\u1cd5\0\u1d12\0\u1d4f\0\u1d8c\0\u1dc9"+
    "\0\u1e06\0\u1e43\0\u1e80\0\u1ebd\0\u1efa\0\u1f37\0\u1f74\0\u1fb1"+
    "\0\u1fee\0\u202b\0\u2068\0\u20a5\0\u20e2\0\u211f\0\u215c\0\u2199"+
    "\0\u21d6\0\u2213\0\u2250\0\u016e\0\u228d\0\u22ca\0\u2307\0\u2344"+
    "\0\u2381\0\u23be\0\u23fb\0\u2438\0\u2475\0\u24b2\0\u24ef\0\u252c"+
    "\0\u2569\0\u25a6\0\u20e2\0\u25e3\0\u2620\0\u265d\0\u269a\0\u26d7"+
    "\0\u2714\0\u2751\0\u278e\0\u27cb\0\u2808\0\u2845\0\u2882\0\u28bf"+
    "\0\u28fc\0\u2939\0\u2976\0\u29b3\0\u29f0\0\u2a2d\0\u23be\0\u2a6a"+
    "\0\u2475\0\u2aa7\0\u2ae4\0\u2b21\0\u2b5e\0\u2b9b\0\u2bd8\0\u2c15"+
    "\0\u2c52\0\u2c8f\0\u2ccc\0\u2d09\0\u2d46\0\u2d83\0\u2dc0\0\u2dfd"+
    "\0\u2e3a\0\u2e77\0\u2eb4\0\u2ef1\0\u2f2e\0\u2f6b\0\u2fa8\0\u2fe5"+
    "\0\u3022\0\u305f\0\u309c\0\u30d9\0\u3116\0\u3153\0\u3190\0\u31cd"+
    "\0\u320a\0\u3247\0\u3284\0\u32c1\0\u32fe\0\u333b\0\u3378\0\u33b5"+
    "\0\u33f2\0\u342f\0\u346c\0\u34a9\0\u34e6\0\u3523\0\u3560\0\u359d"+
    "\0\u35da\0\u3617";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[250];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\0\1\5\1\0\1\4\1\7"+
    "\1\4\1\10\1\11\1\12\1\13\2\11\1\14\1\15"+
    "\1\16\3\17\2\4\14\10\1\11\1\10\1\20\1\10"+
    "\1\21\1\22\1\23\1\24\2\10\1\25\1\26\1\27"+
    "\1\10\1\30\1\31\1\10\1\32\1\33\1\34\5\10"+
    "\1\13\2\35\1\36\12\35\1\37\34\35\1\40\1\35"+
    "\1\41\14\35\1\42\3\35\2\43\1\44\47\43\1\45"+
    "\1\43\1\46\14\43\1\47\3\43\76\0\1\5\2\0"+
    "\1\5\70\0\2\7\1\50\4\7\1\51\33\7\1\52"+
    "\31\7\11\0\1\10\7\0\4\10\2\0\14\10\1\53"+
    "\30\10\1\0\2\54\1\55\10\54\1\56\27\54\1\57"+
    "\31\54\21\0\4\60\65\0\1\61\2\0\1\62\54\0"+
    "\1\63\2\0\1\63\4\0\2\63\5\0\1\60\1\0"+
    "\3\64\1\65\2\0\3\63\1\66\1\67\1\66\1\70"+
    "\4\63\1\71\5\63\1\66\1\67\1\66\3\63\1\70"+
    "\13\63\1\71\1\63\1\0\1\63\2\0\1\63\4\0"+
    "\2\63\5\0\1\60\1\0\4\17\2\0\3\63\1\66"+
    "\1\67\1\66\1\70\12\63\1\66\1\67\1\66\3\63"+
    "\1\70\15\63\12\0\1\10\7\0\4\10\2\0\14\10"+
    "\1\53\2\10\1\72\7\10\1\73\6\10\1\74\1\22"+
    "\5\10\12\0\1\10\7\0\4\10\2\0\14\10\1\53"+
    "\1\10\1\75\13\10\1\76\12\10\12\0\1\10\7\0"+
    "\4\10\2\0\14\10\1\53\5\10\1\77\22\10\12\0"+
    "\1\10\7\0\4\10\2\0\14\10\1\53\14\10\1\100"+
    "\4\10\1\101\4\10\1\102\1\10\12\0\1\10\7\0"+
    "\4\10\2\0\14\10\1\53\1\10\1\103\7\10\1\104"+
    "\11\10\1\105\4\10\12\0\1\10\7\0\4\10\2\0"+
    "\14\10\1\53\14\10\1\106\13\10\12\0\1\10\7\0"+
    "\4\10\2\0\14\10\1\53\5\10\1\107\7\10\1\110"+
    "\12\10\12\0\1\10\7\0\4\10\2\0\14\10\1\53"+
    "\1\10\1\111\7\10\1\112\16\10\12\0\1\10\7\0"+
    "\4\10\2\0\14\10\1\53\23\10\1\113\4\10\12\0"+
    "\1\10\7\0\4\10\2\0\14\10\1\53\1\10\1\114"+
    "\7\10\1\115\6\10\1\116\7\10\12\0\1\10\7\0"+
    "\4\10\2\0\14\10\1\53\1\10\1\117\3\10\1\120"+
    "\22\10\12\0\1\10\7\0\4\10\2\0\14\10\1\53"+
    "\5\10\1\121\22\10\12\0\1\10\7\0\4\10\2\0"+
    "\14\10\1\53\1\10\1\122\3\10\1\123\22\10\1\0"+
    "\2\35\1\0\12\35\1\0\34\35\1\0\1\35\1\0"+
    "\14\35\1\0\3\35\20\0\1\124\131\0\1\125\10\0"+
    "\1\126\74\0\1\127\77\0\1\130\3\0\2\43\1\0"+
    "\47\43\1\0\1\43\1\0\14\43\1\0\3\43\55\0"+
    "\1\131\10\0\1\132\74\0\1\133\77\0\1\134\3\0"+
    "\7\50\1\135\33\50\1\136\33\50\4\0\1\50\1\7"+
    "\3\50\1\7\5\50\3\7\17\50\1\7\2\50\1\7"+
    "\3\50\1\7\5\50\1\7\3\50\1\7\1\50\1\7"+
    "\1\137\5\50\67\0\1\140\5\0\2\141\1\0\10\141"+
    "\1\142\61\141\13\0\1\142\61\0\2\141\1\0\4\141"+
    "\1\54\3\141\1\143\5\141\2\144\1\145\17\141\1\54"+
    "\2\141\1\54\3\141\1\54\5\141\1\54\3\141\1\54"+
    "\1\141\1\54\1\146\5\141\1\63\2\0\1\63\4\0"+
    "\2\63\7\0\4\60\2\0\3\63\1\66\1\67\1\66"+
    "\13\63\1\66\1\67\1\66\21\63\1\0\1\63\2\0"+
    "\1\63\4\0\2\63\7\0\4\63\2\0\45\63\1\0"+
    "\1\63\2\0\1\63\4\0\2\63\5\0\1\60\1\0"+
    "\3\64\1\65\2\0\3\63\1\66\1\67\1\66\1\147"+
    "\12\63\1\66\1\67\1\66\3\63\1\147\15\63\1\0"+
    "\1\63\2\0\1\63\4\0\2\63\5\0\1\60\1\0"+
    "\4\65\2\0\3\63\1\66\1\67\1\66\13\63\1\66"+
    "\1\67\1\66\21\63\1\0\1\63\2\0\1\63\4\0"+
    "\2\63\4\0\1\150\2\0\4\151\2\0\45\63\1\0"+
    "\1\63\2\0\1\63\4\0\2\63\7\0\4\152\2\0"+
    "\6\152\10\63\6\152\21\63\12\0\1\10\7\0\4\10"+
    "\2\0\14\10\1\53\21\10\1\115\6\10\12\0\1\10"+
    "\7\0\4\10\2\0\14\10\1\53\5\10\1\153\1\10"+
    "\1\154\20\10\12\0\1\10\7\0\4\10\2\0\14\10"+
    "\1\53\3\10\1\155\24\10\12\0\1\10\7\0\4\10"+
    "\2\0\14\10\1\53\20\10\1\156\1\157\6\10\12\0"+
    "\1\10\7\0\4\10\2\0\14\10\1\53\13\10\1\160"+
    "\2\10\1\161\11\10\12\0\1\10\7\0\4\10\2\0"+
    "\14\10\1\53\17\10\1\162\2\10\1\163\5\10\12\0"+
    "\1\10\7\0\4\10\2\0\14\10\1\53\3\10\1\164"+
    "\24\10\12\0\1\10\7\0\4\10\2\0\14\10\1\53"+
    "\16\10\1\115\11\10\12\0\1\10\7\0\4\10\2\0"+
    "\14\10\1\53\3\10\1\165\24\10\12\0\1\10\7\0"+
    "\4\10\2\0\14\10\1\53\13\10\1\166\14\10\12\0"+
    "\1\10\7\0\4\10\2\0\14\10\1\53\14\10\1\167"+
    "\13\10\12\0\1\10\7\0\4\10\2\0\14\10\1\53"+
    "\22\10\1\170\5\10\12\0\1\10\7\0\4\10\2\0"+
    "\14\10\1\53\11\10\1\171\16\10\12\0\1\10\7\0"+
    "\4\10\2\0\14\10\1\53\7\10\1\172\20\10\12\0"+
    "\1\10\7\0\4\10\2\0\14\10\1\53\11\10\1\173"+
    "\16\10\12\0\1\10\7\0\4\10\2\0\14\10\1\53"+
    "\14\10\1\173\13\10\12\0\1\10\7\0\4\10\2\0"+
    "\14\10\1\53\22\10\1\174\5\10\12\0\1\10\7\0"+
    "\4\10\2\0\14\10\1\53\20\10\1\165\1\175\6\10"+
    "\12\0\1\10\7\0\4\10\2\0\14\10\1\53\11\10"+
    "\1\176\3\10\1\177\12\10\12\0\1\10\7\0\4\10"+
    "\2\0\14\10\1\53\11\10\1\200\16\10\12\0\1\10"+
    "\7\0\4\10\2\0\14\10\1\53\1\10\1\201\20\10"+
    "\1\202\5\10\12\0\1\10\7\0\4\10\2\0\14\10"+
    "\1\53\14\10\1\163\13\10\12\0\1\10\7\0\4\10"+
    "\2\0\14\10\1\53\13\10\1\203\14\10\12\0\1\10"+
    "\7\0\4\10\2\0\14\10\1\53\26\10\1\204\1\10"+
    "\57\0\1\205\100\0\1\206\100\0\1\207\77\0\1\210"+
    "\61\0\1\211\100\0\1\212\100\0\1\213\77\0\1\214"+
    "\3\0\2\50\4\0\76\50\1\135\11\50\4\215\2\50"+
    "\6\215\6\50\1\136\1\50\6\215\22\50\21\0\4\216"+
    "\2\0\6\216\10\0\6\216\22\0\2\141\1\0\10\141"+
    "\1\56\63\141\1\0\10\141\1\142\5\141\3\145\53\141"+
    "\1\0\10\141\1\142\5\141\3\54\53\141\1\0\10\141"+
    "\1\56\5\141\4\217\2\141\6\217\10\141\6\217\22\141"+
    "\21\0\4\151\50\0\1\63\2\0\1\63\4\0\2\63"+
    "\7\0\4\151\2\0\3\63\1\66\1\63\1\66\13\63"+
    "\1\66\1\63\1\66\21\63\1\0\1\63\2\0\1\63"+
    "\4\0\2\63\7\0\4\152\2\0\6\152\1\147\7\63"+
    "\6\152\3\63\1\147\15\63\12\0\1\10\7\0\4\10"+
    "\2\0\14\10\1\53\1\10\1\220\26\10\12\0\1\10"+
    "\7\0\4\10\2\0\14\10\1\53\15\10\1\221\12\10"+
    "\12\0\1\10\7\0\4\10\2\0\14\10\1\53\11\10"+
    "\1\222\16\10\12\0\1\10\7\0\4\10\2\0\14\10"+
    "\1\53\1\10\1\223\26\10\12\0\1\10\7\0\4\10"+
    "\2\0\14\10\1\53\15\10\1\77\12\10\12\0\1\10"+
    "\7\0\4\10\2\0\14\10\1\53\16\10\1\224\11\10"+
    "\12\0\1\10\7\0\4\10\2\0\14\10\1\53\11\10"+
    "\1\225\16\10\12\0\1\10\7\0\4\10\2\0\14\10"+
    "\1\53\23\10\1\226\4\10\12\0\1\10\7\0\4\10"+
    "\2\0\14\10\1\53\1\10\1\157\26\10\12\0\1\10"+
    "\7\0\4\10\2\0\14\10\1\53\15\10\1\227\2\10"+
    "\1\230\7\10\12\0\1\10\7\0\4\10\2\0\14\10"+
    "\1\53\1\10\1\77\26\10\12\0\1\10\7\0\4\10"+
    "\2\0\4\10\1\231\1\232\1\10\1\233\1\10\1\22"+
    "\2\10\1\53\30\10\12\0\1\10\7\0\4\10\2\0"+
    "\14\10\1\53\3\10\1\163\24\10\12\0\1\10\7\0"+
    "\4\10\2\0\14\10\1\53\5\10\1\234\22\10\12\0"+
    "\1\10\7\0\4\10\2\0\14\10\1\53\1\10\1\235"+
    "\26\10\12\0\1\10\7\0\4\10\2\0\14\10\1\53"+
    "\11\10\1\236\16\10\12\0\1\10\7\0\4\10\2\0"+
    "\14\10\1\53\23\10\1\237\4\10\12\0\1\10\7\0"+
    "\4\10\2\0\14\10\1\53\20\10\1\240\7\10\12\0"+
    "\1\10\7\0\4\10\2\0\14\10\1\53\21\10\1\157"+
    "\6\10\12\0\1\10\7\0\4\10\2\0\14\10\1\53"+
    "\14\10\1\241\13\10\12\0\1\10\7\0\4\10\2\0"+
    "\14\10\1\53\3\10\1\242\24\10\12\0\1\10\7\0"+
    "\4\10\2\0\14\10\1\53\27\10\1\243\12\0\1\10"+
    "\7\0\4\10\2\0\14\10\1\53\12\10\1\244\15\10"+
    "\12\0\1\10\7\0\4\10\2\0\14\10\1\53\15\10"+
    "\1\245\12\10\12\0\1\10\7\0\4\10\2\0\14\10"+
    "\1\53\1\10\1\246\26\10\12\0\1\10\7\0\4\10"+
    "\2\0\14\10\1\53\22\10\1\247\5\10\52\0\1\206"+
    "\50\0\1\250\131\0\1\251\31\0\1\252\126\0\1\212"+
    "\50\0\1\253\131\0\1\254\31\0\1\255\55\0\7\50"+
    "\1\135\11\50\4\256\2\50\6\256\6\50\1\136\1\50"+
    "\6\256\22\50\21\0\4\257\2\0\6\257\10\0\6\257"+
    "\22\0\2\141\1\0\10\141\1\56\5\141\4\260\2\141"+
    "\6\260\10\141\6\260\22\141\11\0\1\10\7\0\4\10"+
    "\2\0\14\10\1\53\22\10\1\261\5\10\12\0\1\10"+
    "\7\0\4\10\2\0\14\10\1\53\20\10\1\262\7\10"+
    "\12\0\1\10\7\0\4\10\2\0\14\10\1\53\11\10"+
    "\1\263\16\10\12\0\1\10\7\0\4\10\2\0\14\10"+
    "\1\53\3\10\1\264\24\10\12\0\1\10\7\0\4\10"+
    "\2\0\14\10\1\53\1\10\1\265\26\10\12\0\1\10"+
    "\7\0\4\10\2\0\14\10\1\53\1\10\1\115\26\10"+
    "\12\0\1\10\7\0\4\10\2\0\14\10\1\53\1\10"+
    "\1\266\26\10\12\0\1\10\7\0\4\10\2\0\14\10"+
    "\1\53\12\10\1\267\15\10\12\0\1\10\7\0\4\10"+
    "\2\0\14\10\1\53\5\10\1\270\22\10\12\0\1\10"+
    "\7\0\4\10\2\0\14\10\1\53\14\10\1\271\4\10"+
    "\1\272\6\10\12\0\1\10\7\0\4\10\2\0\14\10"+
    "\1\53\23\10\1\105\4\10\12\0\1\10\7\0\4\10"+
    "\2\0\14\10\1\53\1\10\1\273\16\10\1\116\7\10"+
    "\12\0\1\10\7\0\4\10\2\0\14\10\1\53\11\10"+
    "\1\274\6\10\1\275\7\10\12\0\1\10\7\0\4\10"+
    "\2\0\2\10\1\276\11\10\1\53\30\10\12\0\1\10"+
    "\7\0\4\10\2\0\14\10\1\53\3\10\1\247\24\10"+
    "\12\0\1\10\7\0\4\10\2\0\14\10\1\53\21\10"+
    "\1\277\6\10\12\0\1\10\7\0\4\10\2\0\14\10"+
    "\1\53\15\10\1\300\12\10\12\0\1\10\7\0\4\10"+
    "\2\0\14\10\1\53\3\10\1\301\24\10\12\0\1\10"+
    "\7\0\4\10\2\0\14\10\1\53\5\10\1\302\22\10"+
    "\12\0\1\10\7\0\4\10\2\0\10\10\1\303\3\10"+
    "\1\53\30\10\12\0\1\10\7\0\4\10\2\0\14\10"+
    "\1\53\20\10\1\304\7\10\12\0\1\10\7\0\4\10"+
    "\2\0\14\10\1\53\14\10\1\305\13\10\12\0\1\10"+
    "\7\0\4\10\2\0\14\10\1\53\15\10\1\244\12\10"+
    "\21\0\1\306\101\0\1\250\37\0\1\206\15\0\1\307"+
    "\1\0\1\307\1\252\6\307\5\252\1\307\1\0\14\252"+
    "\1\0\1\307\27\252\21\0\1\310\101\0\1\253\37\0"+
    "\1\212\15\0\1\311\1\0\1\311\1\255\6\311\5\255"+
    "\1\311\1\0\14\255\1\0\1\311\27\255\1\0\7\50"+
    "\1\135\11\50\4\312\2\50\6\312\6\50\1\136\1\50"+
    "\6\312\22\50\21\0\4\313\2\0\6\313\10\0\6\313"+
    "\22\0\2\141\1\0\10\141\1\56\5\141\4\314\2\141"+
    "\6\314\10\141\6\314\22\141\11\0\1\10\7\0\4\10"+
    "\2\0\14\10\1\53\15\10\1\315\12\10\12\0\1\10"+
    "\7\0\4\10\2\0\14\10\1\53\11\10\1\316\16\10"+
    "\12\0\1\10\7\0\4\10\2\0\14\10\1\53\22\10"+
    "\1\317\5\10\12\0\1\10\7\0\4\10\2\0\14\10"+
    "\1\53\20\10\1\320\7\10\12\0\1\10\7\0\4\10"+
    "\2\0\14\10\1\53\14\10\1\321\13\10\12\0\1\10"+
    "\7\0\4\10\2\0\14\10\1\53\10\10\1\165\17\10"+
    "\12\0\1\10\7\0\4\10\2\0\14\10\1\53\24\10"+
    "\1\322\3\10\12\0\1\10\7\0\4\10\2\0\14\10"+
    "\1\53\17\10\1\162\10\10\12\0\1\10\7\0\4\10"+
    "\2\0\14\10\1\53\3\10\1\323\24\10\12\0\1\10"+
    "\7\0\4\10\2\0\14\10\1\53\20\10\1\165\7\10"+
    "\12\0\1\10\7\0\4\10\2\0\14\10\1\53\20\10"+
    "\1\247\7\10\12\0\1\10\7\0\4\10\2\0\14\10"+
    "\1\53\20\10\1\324\7\10\12\0\1\10\7\0\4\10"+
    "\2\0\14\10\1\53\1\10\1\325\26\10\12\0\1\10"+
    "\7\0\4\10\2\0\14\10\1\53\3\10\1\326\24\10"+
    "\12\0\1\10\7\0\4\10\2\0\2\10\1\327\11\10"+
    "\1\53\30\10\12\0\1\10\7\0\4\10\2\0\14\10"+
    "\1\53\11\10\1\330\16\10\12\0\1\10\7\0\4\10"+
    "\2\0\14\10\1\53\4\10\1\331\23\10\12\0\1\10"+
    "\7\0\4\10\2\0\14\10\1\53\23\10\1\332\4\10"+
    "\12\0\1\10\7\0\4\10\2\0\14\10\1\53\14\10"+
    "\1\165\13\10\12\0\1\10\7\0\4\10\2\0\14\10"+
    "\1\53\10\10\1\333\17\10\21\0\1\252\74\0\1\255"+
    "\54\0\7\50\1\135\11\50\4\7\2\50\6\7\6\50"+
    "\1\136\1\50\6\7\22\50\21\0\4\10\2\0\6\10"+
    "\10\0\6\10\22\0\2\141\1\0\10\141\1\56\5\141"+
    "\4\54\2\141\6\54\10\141\6\54\22\141\11\0\1\10"+
    "\7\0\4\10\2\0\14\10\1\53\20\10\1\334\7\10"+
    "\12\0\1\10\7\0\4\10\2\0\14\10\1\53\22\10"+
    "\1\335\5\10\12\0\1\10\7\0\4\10\2\0\14\10"+
    "\1\53\5\10\1\336\22\10\12\0\1\10\7\0\4\10"+
    "\2\0\14\10\1\53\1\10\1\337\26\10\12\0\1\10"+
    "\7\0\4\10\2\0\14\10\1\53\22\10\1\157\5\10"+
    "\12\0\1\10\7\0\4\10\2\0\14\10\1\53\1\10"+
    "\1\340\26\10\12\0\1\10\7\0\4\10\2\0\14\10"+
    "\1\53\15\10\1\227\12\10\12\0\1\10\7\0\4\10"+
    "\2\0\14\10\1\53\15\10\1\341\12\10\12\0\1\10"+
    "\7\0\4\10\2\0\14\10\1\53\20\10\1\342\7\10"+
    "\12\0\1\10\7\0\4\10\2\0\14\10\1\53\23\10"+
    "\1\343\4\10\12\0\1\10\7\0\4\10\2\0\14\10"+
    "\1\53\1\10\1\175\26\10\12\0\1\10\7\0\4\10"+
    "\2\0\14\10\1\53\16\10\1\344\11\10\12\0\1\10"+
    "\7\0\4\10\2\0\14\10\1\53\11\10\1\345\16\10"+
    "\12\0\1\10\7\0\4\10\2\0\14\10\1\53\1\10"+
    "\1\346\26\10\12\0\1\10\7\0\4\10\2\0\14\10"+
    "\1\53\15\10\1\337\12\10\12\0\1\10\7\0\4\10"+
    "\2\0\14\10\1\53\11\10\1\347\16\10\12\0\1\10"+
    "\7\0\4\10\2\0\14\10\1\53\13\10\1\157\14\10"+
    "\12\0\1\10\7\0\4\10\2\0\14\10\1\53\20\10"+
    "\1\350\7\10\12\0\1\10\7\0\4\10\2\0\12\10"+
    "\1\351\1\10\1\53\30\10\12\0\1\10\7\0\4\10"+
    "\2\0\14\10\1\53\12\10\1\115\15\10\12\0\1\10"+
    "\7\0\4\10\2\0\14\10\1\53\13\10\1\352\14\10"+
    "\12\0\1\10\7\0\4\10\2\0\14\10\1\53\1\10"+
    "\1\353\26\10\12\0\1\10\7\0\4\10\2\0\14\10"+
    "\1\53\12\10\1\354\15\10\12\0\1\10\7\0\4\10"+
    "\2\0\14\10\1\53\1\10\1\355\26\10\12\0\1\10"+
    "\7\0\4\10\2\0\14\10\1\53\13\10\1\356\14\10"+
    "\12\0\1\10\7\0\4\10\2\0\14\10\1\53\4\10"+
    "\1\357\23\10\12\0\1\10\7\0\4\10\2\0\14\10"+
    "\1\53\15\10\1\115\12\10\12\0\1\10\7\0\4\10"+
    "\2\0\1\360\13\10\1\53\30\10\12\0\1\10\7\0"+
    "\4\10\2\0\14\10\1\53\5\10\1\361\22\10\12\0"+
    "\1\10\7\0\4\10\2\0\14\10\1\53\16\10\1\165"+
    "\11\10\12\0\1\10\7\0\4\10\2\0\14\10\1\53"+
    "\3\10\1\362\24\10\12\0\1\10\7\0\4\10\2\0"+
    "\14\10\1\53\15\10\1\235\12\10\12\0\1\10\7\0"+
    "\4\10\2\0\14\10\1\53\12\10\1\77\15\10\12\0"+
    "\1\10\7\0\4\10\2\0\14\10\1\53\5\10\1\266"+
    "\22\10\12\0\1\10\7\0\4\10\2\0\14\10\1\53"+
    "\20\10\1\363\7\10\12\0\1\10\7\0\4\10\2\0"+
    "\14\10\1\53\21\10\1\364\6\10\12\0\1\10\7\0"+
    "\4\10\2\0\14\10\1\53\26\10\1\365\1\10\12\0"+
    "\1\10\7\0\4\10\2\0\14\10\1\53\22\10\1\366"+
    "\5\10\12\0\1\10\7\0\4\10\2\0\14\10\1\53"+
    "\1\10\1\367\26\10\12\0\1\10\7\0\4\10\2\0"+
    "\14\10\1\53\3\10\1\370\24\10\12\0\1\10\7\0"+
    "\4\10\2\0\14\10\1\53\22\10\1\347\5\10\12\0"+
    "\1\10\7\0\4\10\2\0\14\10\1\53\5\10\1\371"+
    "\22\10\12\0\1\10\7\0\4\10\2\0\14\10\1\53"+
    "\4\10\1\225\23\10\12\0\1\10\7\0\4\10\2\0"+
    "\14\10\1\53\11\10\1\372\16\10\12\0\1\10\7\0"+
    "\4\10\2\0\14\10\1\53\20\10\1\115\7\10\12\0"+
    "\1\10\7\0\4\10\2\0\14\10\1\53\11\10\1\115"+
    "\16\10\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13908];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\2\1\1\11\1\1\1\11"+
    "\22\1\1\11\5\1\1\11\4\1\1\11\1\1\1\0"+
    "\1\1\1\0\1\11\2\1\2\11\41\1\1\11\10\0"+
    "\1\11\2\1\1\0\1\1\1\11\5\1\1\0\34\1"+
    "\10\0\1\1\1\0\31\1\2\0\1\1\2\0\2\1"+
    "\1\0\26\1\4\0\1\1\1\0\57\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[250];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public CalangoTokenMaker() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *        occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * Returns the text to place at the beginning and end of a
	 * line to "comment" it in a this programming language.
	 *
	 * @return The start and end strings to add to a line to "comment"
	 *         it out.
	 */
	public String[] getLineCommentStartAndEnd() {
		return null;
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
						case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;

			/* No documentation comments */
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new DefaultToken();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(java.io.Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count;
		zzCurrentPos = zzMarkedPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CalangoTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }  // fall though
            case 251: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }  // fall though
            case 252: break;
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }  // fall though
            case 253: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { addToken(Token.IDENTIFIER);
            }
            // fall through
          case 27: break;
          case 2:
            { addToken(Token.WHITESPACE);
            }
            // fall through
          case 28: break;
          case 3:
            { addNullToken(); return firstToken;
            }
            // fall through
          case 29: break;
          case 4:
            { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
            }
            // fall through
          case 30: break;
          case 5:
            { addToken(Token.OPERATOR);
            }
            // fall through
          case 31: break;
          case 6:
            { addToken(Token.ERROR_CHAR); addNullToken(); return firstToken;
            }
            // fall through
          case 32: break;
          case 7:
            { addToken(Token.SEPARATOR);
            }
            // fall through
          case 33: break;
          case 8:
            { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
            }
            // fall through
          case 34: break;
          case 9:
            { 
            }
            // fall through
          case 35: break;
          case 10:
            { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            // fall through
          case 36: break;
          case 11:
            { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            // fall through
          case 37: break;
          case 12:
            { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
            }
            // fall through
          case 38: break;
          case 13:
            { addToken(Token.ERROR_CHAR);
            }
            // fall through
          case 39: break;
          case 14:
            { addToken(Token.LITERAL_NUMBER_FLOAT);
            }
            // fall through
          case 40: break;
          case 15:
            { start = zzMarkedPos-2; yybegin(MLC);
            }
            // fall through
          case 41: break;
          case 16:
            { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
            }
            // fall through
          case 42: break;
          case 17:
            { addToken(Token.ERROR_NUMBER_FORMAT);
            }
            // fall through
          case 43: break;
          case 18:
            { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
            }
            // fall through
          case 44: break;
          case 19:
            { addToken(Token.RESERVED_WORD);
            }
            // fall through
          case 45: break;
          case 20:
            { addToken(Token.FUNCTION);
            }
            // fall through
          case 46: break;
          case 21:
            { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_MULTILINE);
            }
            // fall through
          case 47: break;
          case 22:
            { addToken(Token.ERROR_STRING_DOUBLE);
            }
            // fall through
          case 48: break;
          case 23:
            { addToken(Token.LITERAL_CHAR);
            }
            // fall through
          case 49: break;
          case 24:
            { addToken(Token.DATA_TYPE);
            }
            // fall through
          case 50: break;
          case 25:
            { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
            }
            // fall through
          case 51: break;
          case 26:
            { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
            }
            // fall through
          case 52: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
